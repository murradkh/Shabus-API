0) # Database.database[collection].ensure_index(index_field, expireAfterSeconds=expire_after_seconds)

1) # Database.set_ttl_for_collection("Current_shifts", index_field='createdAt', expire_after_seconds=6*60*60)

2)# session['_id'] = driver_details['_id']  # setting the cookie
#   session.permanent = True  # enables the expiration timeout
#   return session['_id']

3)
# Database.init_Database()
#
# hashed_password = bcrypt.hashpw(b"123",bcrypt.gensalt())
# email = 'murradkhalil@gmail.com'
# D = {'_id': uuid.uuid4().hex, 'email':email, 'Password': hashed_password.decode()}
# Database.save_to_DB('Drivers', D)


# import psycopg2 as p

# try:
#     connection = p.connect("dbname='d2ink2ug7q191f' user='ewvctvrtnsgwwc' host='ec2-54-228-251-254.eu-west-1.compute.amazonaws.com' password='35b1b3c3129277497c85646ebd99cdf2edecc490cd03b4cb0532656d7fbfd962' port='5432'")
#     connection.autocommit = True
#     cursor = connection.cursor()
# except:
#     print("Cannot connect to database")
#
# cursor = connection.cursor()
# create_table_command = 'select * from user_'
# cursor.execute(create_table_command)
# data = list(cursor.fetchall())
#
# create_table_command = 'select * from  roles_users'
# cursor.execute(create_table_command)
# roles_users = cursor.fetchall()
# Drivers_id = []
# for i in roles_users:
#     if i[1] == 2:
#         Drivers_id.append(i)
#
#
# Drivers_details = [(i[0],i[1],i[2]) for i in data if (i[0],2) in Drivers_id ]
#
# create_table_command = 'select * from  passenger'
# cursor.execute(create_table_command)
# passengers = cursor.fetchall()
#
#
# # [Database.save_to_DB("Drivers", {'_id': i[0], 'email':i[1], 'Password':i[2]}) for i in Drivers_details]
# [Database.save_to_DB("Passengers", {'_id': i[0], 'member_id': i[1], 'passenger_type': str(i[2]), 'id_number': i[6], 'phone_number': i[5], 'name':((str(i[3])+" "+str(i[4])) if i[4] is not None else 'None'), 'has_smartphone': str(i[7])}) for i in passengers]
#



4) # from functools import wraps
# from flask import request, jsonify
# from src.Common.Utilites import Utils
#
# def valid_token_exist(f):
#     @wraps(f)
#     def decorated_function():
#         content = request.get_json()
#         token = content.get('Token')
#         valid = Utils.Token_Isvalid(token)
#         if valid is False:
#             print('token is not valid!')
#             return jsonify({'Status': 'Reject', 'message': 'UnAuthorized Access!'})
#
#         print(token)
#         # return jsonify({'Status': 'Accept', 'message': 'The Ride is recorded!'})
#         return f(token)
#     return decorated_function

4) # app.permanent_session_lifetime = timedelta(hours= int(app.config['PERMANENT_SESSION_LIFETIME']))

5)     Database.set_ttl_for_collection("New rides", index_field='created_at', expire_after_seconds=30 * 24 * 60 * 60)
    Database.set_ttl_for_collection("Current shifts", index_field='created_at', expire_after_seconds=30 * 24 * 60 * 60)
    Database.set_ttl_for_collection("Previous shifts", index_field='created_at', expire_after_seconds=30 * 24 * 60 * 60)

6)   token = jwt.encode(
            {'email': content['email'], 'name': content['name'], 'phone_number': content['phone_number'],
             'exp': (datetime.datetime.utcnow() + datetime.timedelta(hours=int(life_time_hours),
                                                                     minutes=int(life_time_minutes)))},
            key=SECRET_KEY)

7)  # return isinstance(number, (str, unicode)) and number.startswith("05") and len(number) == 10 # this is alternative way to check the phone number is valid
